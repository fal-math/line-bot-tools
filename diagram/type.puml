@startuml Class Diagram of Types
skinparam linetype ortho

enum KarutaClass {
  A
  B
  C
  D
  E
  F
  G
}

enum ShortBuildingName {
  Jinja: "神社";
  Tokiwa: "常盤";
  Kitaurawa: "北浦和";
  Nakacho: "仲町";
  Kamiochiai: "上落合";
  Shimoochiai: "下落合";
  Nakamoto: "仲本";
  Motobuto: "本太";
  Bessho: "別所";
  Tajima: "田島";
  Sashiougi: "指扇";
}

class ByKarutaClass<T> {
}

class ChouseisanUrls {
  +[key in KarutaClass]: String
}
class ChouseisanCsvs {
  +[key in KarutaClass]: String
}

' class GroupedEvents {
'   +[key in KarutaClass]: { events: List<String>; url: String }
' }

class CalendarEvent {
  +date: Date
  +class: KarutaClass[]
}

class ChouseisanEvent {
  +title: String
  +eventDate: Date
  +deadline: Date
  +participants: ParticipantStatus
}

class MatchCalendarEvent {
  +title: String
  +location: String
  +mapUrl: String
}

class OuterPracticeCalendarEvent {
  +title: String
  +location: String
  +mapUrl: String
}

class TeamPracticeCalendarEvent {
  +location: PracticeLocation
  +place: String
  +timeRange: String
  +type: String
}


CalendarEvent <|-- TeamPracticeCalendarEvent
CalendarEvent <|-- MatchCalendarEvent
CalendarEvent <|-- OuterPracticeCalendarEvent

' PracticeLocation
class PracticeLocation {
  +buildingName: String
  +shortBuildingName: ShortBuildingName
  +mapUrl: String
  +clubName: String
  +nearestStation: String
}

class PracticeLocations<Keys> {
  +[key in Keys]: PracticeLocation
}

class ParticipantStatus {
  +attending: List<String>
  +notAttending: List<String>
  +undecided: List<String>
}


class UrlPair {
  +original: String
  +preview: string
}

class Mention {
  +type: String
  +mentionee: Object
}

class SubstitutionMap {
  +[key: String]: Mention
}

PracticeLocation <|-- PracticeLocations
ByKarutaClass -up-> KarutaClass
CalendarEvent -up-> KarutaClass
ByKarutaClass ..> ChouseisanUrls
ByKarutaClass ..> ChouseisanCsvs
' ByKarutaClass ..> GroupedEvents
ChouseisanEvent --> ParticipantStatus
TeamPracticeCalendarEvent --> PracticeLocation
SubstitutionMap --> Mention
@enduml