import Config from '../config/config';
import { CalendarService } from '../services/CalendarService';
import { LineService } from '../services/LineService';
import { ExPracticeCategory, ExPracticeEvent } from '../types/type';
import { DateUtils } from '../util/DateUtils';
import { StringUtils } from '../util/StringUtils';

export class LineWebhookHandler {
  private line = new LineService();
  private calendar = new CalendarService();

  private key = {
    date: 'Êó•‰ªò',
    time: 'ÊôÇÈñì',
    title: 'Á∑¥ÁøíÂêç',
    location: 'Â†¥ÊâÄ',
    targetClasses: 'ÂØæË±°Á¥ö',
    deadline: '„ÄÜÂàá',
    category: 'Á®ÆÂà•',
  };
  private keyDescription = {
    date: 'Êó•‰ªò: „Äå‚óØ/‚òì„Äç„ÅÆÂΩ¢Âºè„ÄÇ‰æã‚Üí9/13',
    time: 'ÊôÇÈñì: „Äå0900-1900„Äç„ÅÆÂΩ¢Âºè',
    title: 'Á∑¥ÁøíÂêç: „Äå‚óØ‚óØÁ∑¥„Äç„ÅÆÂΩ¢Âºè„ÅåÊé®Â•®',
    location: 'Â†¥ÊâÄ: Áâπ„Å´„Å™„Åó',
    targetClasses: 'ÂØæË±°Á¥ö:\n‰æã1‚ÜíABC„ÄÅ\n‰æã2‚ÜíE‰ª•‰∏ä„ÄÅ\n‰æã3‚ÜíGÁ¥ö‚ë†‚ë°‚ë¢‰ª•‰∏ä',
    deadline: '„ÄÜÂàá: „Äå‚óØ/‚òì„Äç„ÅÆÂΩ¢Âºè„ÄÇ‰æã‚Üí9/13',
    category: `Á®ÆÂà•: ‰∏ãË®ò„ÅÆ„Å©„Çå„Åã„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ\n${Object.values(ExPracticeCategory).join('/')}`,
  };

  public handle(text: string, to: string) {
    if (text === 'Â§ñÈÉ®Á∑¥ËøΩÂä†') {
      this.line.pushText(
        to,
        [
          '‚òÖÂ§ñÈÉ®Á∑¥ËøΩÂä†„Éï„Ç©„Éº„Éû„ÉÉ„Éà‚òÖ',
          `${this.key.date}Ôºö`,
          `${this.key.time}Ôºö`,
          `${this.key.title}Ôºö`,
          `${this.key.location}Ôºö`,
          `${this.key.targetClasses}Ôºö`,
          `${this.key.deadline}Ôºö`,
          `${this.key.category}Ôºö`,
        ].join('\n')
      );
      this.line.pushText(
        to,
        [
          '‚ÜëÂüã„ÇÅ„Å¶Ëøî‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑ‚Üë',
          '',
          'Ë®òËºâ‰∏ä„ÅÆÊ≥®ÊÑè',
          `${this.keyDescription.date}`,
          `${this.keyDescription.time}`,
          `${this.keyDescription.title}`,
          `${this.keyDescription.location}`,
          `${this.keyDescription.targetClasses}`,
          `${this.keyDescription.deadline}`,
          `${this.keyDescription.category}`,
        ].join('\n')
      );
      return;
    }

    if (text.trim().includes('Â§ñÈÉ®Á∑¥ËøΩÂä†„Éï„Ç©„Éº„Éû„ÉÉ„Éà')) {
      this.line.pushText(to, 'Â§ñÈÉ®Á∑¥ËøΩÂä†‰ΩúÊ•≠„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇÂ∞ë„ÄÖ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ');

      text = StringUtils.toHalfWidth(text);
      const parsed = this.parseExternalPractice(text);
      if (!parsed) {
        this.line.pushText(to, '„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÂÜçÂ∫¶„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ');
        return;
      }

      let calendarDescription = '';
      switch (parsed.event.category) {
        case ExPracticeCategory.Godo:
          calendarDescription = [
            '‚è∞üìûÂΩìÊó•Ê¨†Â∏≠„ÉªÈÅÖÂàª„ÅÆÈÄ£Áµ°',
            '‰∏ªÂÇ¨ËÄÖ:Â±±Ê¢®„Åï„Çì',
            Config.Mail.godorenAddress,
            '‚ö†Ô∏è‰∏ãË®ò„ÇíÂøÖ„ÅöË®òËºâ‚ö†Ô∏è',
            'ÊâÄÂ±û(„Å°„ÅØ„ÇÑ„Åµ„ÇãÂØåÂ£´Ë¶ã)„ÄÅ',
            'ÂêçÂâç„ÄÅ',
            'Áî®‰ª∂(ÈÅÖÂàª„ÅÆÂ†¥Âêà„ÄÅÂà∞ÁùÄ‰∫àÂÆöÊôÇÂàª)',
            '‚ÄªÂ§±Á§º„ÅÆ„Å™„ÅÑ„Çà„ÅÜ„Å´ÔºÅ ',
          ].join('\n');
          break;
        case ExPracticeCategory.KM:
          calendarDescription = [
            '‚è∞üìûÂΩìÊó•Ê¨†Â∏≠„ÉªÈÅÖÂàª„ÅÆÈÄ£Áµ°',
            '„ÉªÂΩìÊó•15ÊôÇ„Åæ„Åß',
            '„ÄÄ‚ÜíË™øÊï¥„Åï„Çì„ÅÆ‰øÆÊ≠£„ÅÆ„Åø„ÅßOK (LINEÈÄ£Áµ°„Å™„Å©‰∏çË¶Å)',
            '„ÉªÂΩìÊó•15ÊôÇ‰ª•Èôç',
            '„ÄÄ‚ÜíÁõ¥Ââç„ÅÆÊ¨†Â∏≠ÔºÜÈÅÖÂàª„ÅØ„ÄÅKMÁ∑¥„ÅÆÂÖ®‰ΩìLINE„Å´ÈÄ£Áµ°',
          ].join('\n');
          break;
        case ExPracticeCategory.Wako:
          calendarDescription = [
            '‚è∞üìûÂΩìÊó•Ê¨†Â∏≠„ÉªÈÅÖÂàª„ÅÆÈÄ£Áµ°',
            'Ê≤≥Èáé„Åï„Çì„Å®È´ôÁî∞(Á•ê)„Åï„Çì„Å∏LINE„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
          ].join('\n');
          break;
        default:
          break;
      }

      try {
        this.calendar.createCalenderEvent(
          {
            start: parsed.event.date,
            location: parsed.event.location,
            summary: `Â§ñÈÉ®${parsed.event.title}${parsed.event.timeRange} ${
              parsed.event.targetClasses
            }:${DateUtils.formatMD(parsed.deadline)}„ÄÜ`,
            description: calendarDescription,
          },
          Config.Calendar.id.externalPractice
        );
      } catch (e) {
        this.line.pushError((e as Error).message);
      }
      try {
        this.calendar.createCalenderEvent(
          {
            start: parsed.deadline,
            summary: `„ÄÜ${parsed.event.targetClasses}|Â§ñÈÉ®${
              parsed.event.title
            }${DateUtils.formatMDD(parsed.event.date)}`,
            description: `„Ç∞„É´„Éº„ÉóLINEÂÜÖ„Äå„Ç§„Éô„É≥„Éà„Äç„Åã„ÇâÂèÇÂä†„Éù„ÉÅ\nKMÁ∑¥„ÅØË™øÊï¥„Åï„ÇìÂÖ•Âäõ„ÇÇÂøò„Çå„Åö„Å´ÔºÅ`,
          },
          Config.Calendar.id.internalDeadline
        );
      } catch (e) {
        this.line.pushError((e as Error).message);
      }

      this.line.pushText(
        to,
        [
          `‚úÖ Â§ñÈÉ®Á∑¥Áøí„ÉªÁ∑†ÂàáÊó•„ÇíÁôªÈå≤„Åó„Åæ„Åó„Åü`,
          `Êó•‰ªòÔºö${parsed.event.date.toLocaleDateString()}`,
          `ÊôÇÈñìÔºö${parsed.event.timeRange}`,
          `Á∑¥ÁøíÂêçÔºö${parsed.event.title}`,
          `ÂØæË±°Á¥öÔºö${parsed.event.targetClasses}`,
          `„ÄÜÂàáÔºö${parsed.deadline.toLocaleDateString()}`,
          `Â†¥ÊâÄ:${parsed.event.location}`,
          `Á®ÆÂà•:${parsed.event.category}`,
        ].join('\n')
      );
      return;
    }
  }

  private parseExternalPractice(text: string): {
    event: ExPracticeEvent;
    deadline: Date;
  } | null {
    // Ë°å„Åî„Å®„Å´ keyÔºövalue „ÇíÊäΩÂá∫
    const lines = text
      .split('\n')
      .map((l) => l.trim())
      .filter((l) => l.includes('Ôºö') && !l.startsWith('‚òÖ'));
    const data: Record<string, string> = {};
    for (const line of lines) {
      const [key, ...rest] = line.split('Ôºö');
      data[key] = rest.join('Ôºö').trim();
    }

    const dateStr = data[this.key.date];
    const deadlineStr = data[this.key.deadline];
    const timeRange = data[this.key.time];
    const title = data[this.key.title];
    const targetClasses = data[this.key.targetClasses]; // ‰ªªÊÑè
    const location = data[this.key.location];
    const category = data[this.key.category];

    if (!dateStr || !deadlineStr || !timeRange || !title || !location || !category) return null;

    let date: Date, deadline: Date;
    try {
      date = DateUtils.parseMD(dateStr);
      deadline = DateUtils.parseMD(deadlineStr);
    } catch {
      return null;
    }

    function isExPracticeCategory(value: unknown): value is ExPracticeCategory {
      return Object.values(ExPracticeCategory).includes(value as ExPracticeCategory);
    }
    if (!isExPracticeCategory(category)) return null;

    return {
      event: {
        date,
        title,
        location,
        timeRange,
        targetClasses,
        category,
      },
      deadline,
    };
  }
}
